# Dockerfile para produção (Railway/Render)
# Multi-stage build otimizado para produção
FROM node:20-alpine AS frontend-build

# Build do Frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci --only=production
COPY frontend/ ./
RUN npm run build

# Build do Backend
FROM maven:3.9.6-eclipse-temurin-17 AS backend-build

WORKDIR /app

# Copy Maven files
COPY pom.xml ./

# Download dependencies
RUN mvn dependency:go-offline -B

# Copy source
COPY src/ ./src/

# Copy frontend build to static resources
COPY --from=frontend-build /app/frontend/dist/ ./src/main/resources/static/

# Build backend
RUN mvn clean package -DskipTests -B

# Final runtime image - Production optimized
FROM eclipse-temurin:17-jre-alpine

# Install wget for health checks
RUN apk add --no-cache wget

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Create uploads directory with proper permissions
RUN mkdir -p /app/uploads && \
    chown -R appuser:appgroup /app

# Copy JAR with proper ownership
COPY --from=backend-build --chown=appuser:appgroup /app/target/*.jar app.jar

# Switch to non-root user
USER appuser

# Set optimal JVM options for containers
ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication"

EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1

ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
