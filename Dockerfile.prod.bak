# Dockerfile otimizado para Railway - Baixa memória
FROM node:20-alpine AS frontend-build
WORKDIR /app
COPY frontend/ ./frontend/
WORKDIR /app/frontend
RUN npm install
RUN npm run build

# Build do Backend com otimizações de memória
FROM maven:3.9.6-eclipse-temurin-17 AS backend-build
WORKDIR /app

# Configurações de memória otimizadas para Railway
ENV MAVEN_OPTS="-Xmx768m -Xms256m -XX:+UseContainerSupport"

# Copy everything needed for build
COPY pom.xml ./
COPY src/ ./src/
COPY --from=frontend-build /app/frontend/dist/ ./src/main/resources/static/

# Single build command to minimize memory usage
RUN mvn clean package -DskipTests -B -Dmaven.repo.local=/tmp/.m2 \
    -Dspring-boot.repackage.skip=false \
    -Dmaven.test.skip=true

# Final lightweight runtime image
FROM eclipse-temurin:17-jre-alpine
RUN apk add --no-cache wget curl

WORKDIR /app

# Create user and directories
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup && \
    mkdir -p /app/uploads && \
    chown -R appuser:appgroup /app

# Copy JAR
COPY --from=backend-build --chown=appuser:appgroup /app/target/*.jar app.jar

USER appuser

# Optimized JVM settings for Railway - More memory for startup
ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=80.0 -XX:+UseG1GC -Xms256m -Dspring.profiles.active=prod"

EXPOSE 8080

# Simplified health check for debugging
HEALTHCHECK --interval=60s --timeout=10s --start-period=120s --retries=3 \
  CMD curl -f http://localhost:8080/ || exit 1

ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]