RELATÓRIO DE DIAGNÓSTICO PARA ANÁLISE DE CORS
===============================================

Projeto: projeto-tac
Proprietário: TheoStracke
Branch: main
Data: 9 de agosto de 2025

===============================================

1. CONFIGURAÇÃO GLOBAL DE CORS
==============================

Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\src\main\java\com\validacao\config\GlobalCorsConfig.java

package com.validacao.config;

import org.springframework.context.annotation.Configuration;

/*
@Configuration
public class GlobalCorsConfig {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                    .allowedOriginPatterns("*")
                    .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "PATCH")
                    .allowedHeaders("*")
                    .allowCredentials(true);
            }
        };
    }
}
*/

// A configuração de CORS foi centralizada em SecurityConfig para evitar conflitos.
// Esta classe foi desativada.
@Configuration
public class GlobalCorsConfig {
    // Intencionalmente vazia.
}

OBSERVAÇÃO: A configuração global de CORS está comentada/desativada. O comentário indica que foi movida para o SecurityConfig.

===============================================

2. CONFIGURAÇÃO DE SEGURANÇA (SPRING SECURITY)
===============================================

Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\src\main\java\com\validacao\security\SecurityConfig.java

package com.validacao.security;

import com.validacao.service.JwtService;
import com.validacao.service.EmpresaService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.*;

import java.util.List;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    @Value("${app.cors.allowed-origins}")
    private String allowedOrigins;

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();

        // Permite domínios explícitos e padrões profissionais (wildcard) para produção
        // Exemplo: https://*.vercel.app, https://projeto-tac.vercel.app, etc
        String[] originPatterns = allowedOrigins.split(",");
        for (int i = 0; i < originPatterns.length; i++) {
            originPatterns[i] = originPatterns[i].trim();
        }
        configuration.setAllowedOriginPatterns(List.of(originPatterns));
        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "PATCH"));
        configuration.setAllowedHeaders(List.of("*"));
        configuration.setAllowCredentials(true);
        configuration.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Bean
    public JwtAuthenticationFilter jwtAuthenticationFilter(JwtService jwtService, EmpresaService empresaService) {
        return new JwtAuthenticationFilter(jwtService, empresaService);
    }

     @Bean
    public SecurityFilterChain filterChain(HttpSecurity http, JwtAuthenticationFilter jwtAuthenticationFilter) throws Exception {
        http
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .csrf(csrf -> csrf.disable())
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(authz -> authz
                // Permite acesso público para o health check do Railway
                .requestMatchers("/health").permitAll()
                
                // Permite acesso público à raiz da aplicação
                .requestMatchers("/").permitAll()

                // Permite todos os requests de pre-flight (OPTIONS) para o CORS
                .requestMatchers(HttpMethod.OPTIONS, "/**").permitAll()
                
                // Permite acesso público aos endpoints da API para autenticação e aprovação
                .requestMatchers(
                    "/api/auth/**",       // Para login e cadastro
                    "/api/aprovacao/**"   // Para os links de aprovação por e-mail
                ).permitAll()
                
                // Exige autenticação para qualquer outro request
                .anyRequest().authenticated()
            )
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}

CONFIGURAÇÃO CORS NO SPRING SECURITY: ✅ Corretamente configurada com .cors(cors -> cors.configurationSource(corsConfigurationSource()))

===============================================

3. CONTROLLERS E ENDPOINTS
==========================

3.1 AprovacaoController
-----------------------
Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\src\main\java\com\validacao\controller\AprovacaoController.java

@RestController
@RequestMapping("/api/aprovacao")
public class AprovacaoController {
    
    // Endpoints disponíveis:
    // GET  /api/aprovacao/{token}
    // POST /api/aprovacao/{token}
    // GET  /api/aprovacao/{token}/aprovar
    // GET  /api/aprovacao/{token}/rejeitar
    // GET  /api/aprovacao/{token}/arquivo
}

3.2 AuthController
------------------
Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\src\main\java\com\validacao\controller\AuthController.java

@RestController
@RequestMapping("/api/auth")
public class AuthController {
    
    // Endpoints disponíveis:
    // POST /api/auth/login
    // POST /api/auth/cadastro
}

3.3 DocumentoController
-----------------------
Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\src\main\java\com\validacao\controller\DocumentoController.java

@RestController
@RequestMapping("/api/documentos")
public class DocumentoController {
    
    // Endpoints disponíveis:
    // POST /api/documentos/enviar
    // GET  /api/documentos/empresa/{empresaId}
    // GET  /api/documentos/pendentes
    // POST /api/documentos/{id}/aprovar
    // POST /api/documentos/{id}/rejeitar
    // GET  /api/documentos/{id}
    // GET  /api/documentos/{id}/arquivo
}

3.4 HealthController
--------------------
Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\src\main\java\com\validacao\controller\HealthController.java

@RestController
public class HealthController {
    
    // Endpoints disponíveis:
    // GET /health
    // GET /
}

3.5 PedidoDocumentosController
------------------------------
Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\src\main\java\com\validacao\controller\PedidoDocumentosController.java

@RestController
@RequestMapping("/api/pedidos")
public class PedidoDocumentosController {
    
    // Endpoints disponíveis:
    // GET  /api/pedidos/debug/logs
    // POST /api/pedidos/enviar
    // GET  /api/pedidos
    // GET  /api/pedidos/empresa/{empresaId}
}

3.6 TestController
------------------
Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\src\main\java\com\validacao\controller\TestController.java

@RestController
@RequestMapping("/test")
public class TestController {
    
    // Endpoints disponíveis:
    // GET     /test/cors
    // POST    /test/cors
    // OPTIONS /test/cors
}

OBSERVAÇÃO: Nenhum controller possui anotações @CrossOrigin a nível de classe ou método, o que é correto já que o CORS está configurado globalmente no SecurityConfig.

===============================================

4. ARQUIVOS DE PROPRIEDADES
===========================

Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\src\main\resources\application.properties

# Banco de dados MySQL no Railway (a senha deve ser uma variável de ambiente)
spring.datasource.url=jdbc:mysql://mysql-c-j4.railway.internal:3306/railway?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# CORS
app.cors.allowed-origins=https://projeto-tac-theostracke11-9910s-projects.vercel.app

# Upload de arquivos
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
app.upload.dir=uploads/

# Email - produção via variáveis de ambiente
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

# Logging
logging.level.com.validacao=INFO
logging.level.org.springframework.security=WARN

# Porta do servidor (CRÍTICO PARA A RAILWAY)
server.port=${PORT:8080}

# Healthcheck do Railway: o endpoint correto é /health
# Certifique-se de configurar o healthcheck do Railway para /health

===============================================

5. DEPENDÊNCIAS DO PROJETO
==========================

Arquivo: c:\Users\theoc\Documents\GitHub\projeto-tac\pom.xml

Versão do Spring Boot: 3.3.2
Versão do Java: 17

<dependencies>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.32</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- JWT -->
    <dependency>
      <groupId>com.auth0</groupId>
      <artifactId>java-jwt</artifactId>
      <version>4.4.0</version>
    </dependency>

    <!-- MySQL Connector -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Email -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-mail</artifactId>
    </dependency>

    <!-- Configuration processor for custom properties -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>
</dependencies>

===============================================

RESUMO E PONTOS DE ATENÇÃO
==========================

STATUS DO CORS:
✅ CORS configurado corretamente no SecurityConfig com corsConfigurationSource()
⚠️ Origin específica configurada apenas para https://projeto-tac-theostracke11-9910s-projects.vercel.app
✅ Spring Security integrado corretamente com CORS
✅ Endpoints OPTIONS permitidos para preflight requests
✅ Credenciais habilitadas (allowCredentials(true))
✅ Headers permitidos com wildcard (*)
✅ GlobalCorsConfig desativado (comentado), evitando conflitos

POSSÍVEL PROBLEMA:
A configuração CORS permite apenas um domínio específico. Se você estiver testando localmente ou de outros domínios, isso pode causar problemas de CORS.

RECOMENDAÇÕES:
1. Para desenvolvimento local, adicione http://localhost:3000 ou http://localhost:5173 nas origens permitidas
2. Para permitir múltiplos domínios, use vírgula para separar: 
   app.cors.allowed-origins=https://projeto-tac-theostracke11-9910s-projects.vercel.app,http://localhost:5173
3. Para ambientes de desenvolvimento, considere usar padrões como https://*.vercel.app

===============================================

FIM DO RELATÓRIO
